# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------
# person_in_charge: sylvie.michel-ponnelle@edf.fr

POURSUITE()


# READ RAW REDUCED RESULT
# -----------------------
RES_RAW=LIRE_RESU(TYPE_RESU='EVOL_NOLI',
                  FORMAT='MED',
                  MODELE=MODR,
                  TOUT_ORDRE='OUI',
                  UNITE=80,
                  FORMAT_MED=_F(NOM_CHAM='SIEF_ELGA',
                                NOM_CHAM_MED='RES2____SIEF_ELGA',),)

#
# READ RECONSTRUCTED RESULT
# -------------------------
RES_REC=LIRE_RESU(TYPE_RESU='EVOL_NOLI',
                  FORMAT='MED',
                  MODELE=MODR,
                  TOUT_ORDRE='OUI',
                  UNITE=81,
                  FORMAT_MED=(_F(NOM_CHAM='SIEF_ELGA',
                                 NOM_CHAM_MED='SIG_REC_SIEF_ELGA',),
                              _F(NOM_CHAM='DEPL',
                                 NOM_CHAM_MED='U_REC___DEPL',),),
                  )

#
# WORKAROUND TO GET THE RIGHT STRESSES ON BARS
# --------------------------------------------
siefr = [None]*len(l_py)
fackwds = []

for i, ti in enumerate(l_py):
    sief3d = CREA_CHAMP(OPERATION='EXTR',
                        TYPE_CHAM='ELGA_SIEF_R',
                        RESULTAT=RES_REC,
                        NOM_CHAM='SIEF_ELGA',
                        INST=ti);
    sief1d = CREA_CHAMP(OPERATION='EXTR',
                        TYPE_CHAM='ELGA_SIEF_R',
                        RESULTAT=RES_RAW,
                        NOM_CHAM='SIEF_ELGA',
                        INST=ti);
    siefr[i]=CREA_CHAMP(OPERATION='ASSE',
                        TYPE_CHAM='ELGA_SIEF_R',
                        MODELE=MODR,
                        ASSE=(_F(CHAM_GD=sief3d,
                                 GROUP_MA='PACE',),
                              _F(CHAM_GD=sief1d,
                                 GROUP_MA='CABLE',),),)
    DETRUIRE(CONCEPT=_F(NOM=sief1d))
    DETRUIRE(CONCEPT=_F(NOM=sief3d))
    fackwds.append({'CHAM_GD': siefr[i], 'INST': ti, 'PRECISION': 1.E-5, 'MODELE': MODR})

# Take reconstructed field and overwrite stress field
RES_REC=CREA_RESU(reuse=RES_REC,
                  RESULTAT=RES_REC,
                  OPERATION='AFFE',
                  TYPE_RESU='EVOL_NOLI',
                  NOM_CHAM='SIEF_ELGA',
                  AFFE=tuple(_F(**mydict) for mydict in fackwds),);

BETON=DEFI_MATERIAU(ELAS_FO=_F(E=E,
                               NU=NU,
                               RHO=RHO,
                               TEMP_DEF_ALPHA=20.0,
                               ALPHA=ALPHA,
                               B_ENDOGE=p_endo ,
                               FONC_DESORP=FCTD,
                               K_DESSIC=p_kdes,),
                    BPEL_BETON=_F(),
                    BETON_BURGER=_F(YoungModulus=p_E_b365,
                                    PoissonRatio=p_nu,
                                    K_RS=p_krs,
                                    ETA_RS=p_etars,
                                    KAPPA=p_kappa,
                                    ETA_IS=p_etais,
                                    K_RD=p_krd,
                                    ETA_RD=p_etard,
                                    ETA_ID=p_etaid,
                                    ETA_FD=p_etafd,
                                    TEMP_0_C=p_temp0c,
                                    QSR_K=p_qsrk),);
CHMATR=AFFE_MATERIAU(MAILLAGE=MAILR,
                    AFFE=(_F(GROUP_MA=('PACE','SI','SD','SG','SH','SB',),
                             MATER=BETON,),
                          _F(GROUP_MA=('CABLEH1','CABLEH2','CABLEH3','CABLEV1','CABLEV2'),
                             MATER=ACIERC),),
                    AFFE_VARC=(_F(TOUT='OUI',
                                  EVOL=HYDRR,
                                  NOM_VARC='HYDR',
                                  NOM_CHAM='HYDR_NOEU'),
                               _F(TOUT='OUI',
                                  EVOL=SCALR,
                                  NOM_VARC='SECH',
                                  VALE_REF=C_100,),
                              _F(TOUT='OUI',
                                 EVOL=TCALR,
                                 NOM_VARC='TEMP',
                                 VALE_REF=T_arret,),),);


# First computation of the residual (w/o Lagrange multipliers)
RES_REC = CALC_CHAMP(reuse=RES_REC,
                     RESULTAT=RES_REC,
                     FORCE='REAC_NODA',
                     MODELE=MODR,
                     CHAM_MATER=CHMATR,
                     CARA_ELEM=CARAMECR,
                     EXCIT=(_F(CHARGE=CLIMR,),
                            _F(CHARGE=CH_DOMR,),),)

RES_REC = CALC_CHAMP(reuse=RES_REC,
                     RESULTAT=RES_REC,
                     FORCE='FORC_NODA',
                     MODELE=MODR,
                     CHAM_MATER=CHMATR,
                     CARA_ELEM=CARAMECR,
                     EXCIT=(_F(CHARGE=CLIMR,),
                            _F(CHARGE=CH_DOMR,),),)

IMPR_RESU(FORMAT='MED',
          UNITE=82,
          RESU=_F(RESULTAT=RES_REC))

FIN()

