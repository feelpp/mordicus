# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------
# person_in_charge: sylvie.michel-ponnelle@edf.fr

POURSUITE(PAR_LOT='NON')
import numpy as np

# ----------------------------------------------------
# ETAPE 2 TER
#
# DONNEES CONSTANTES POUR L'INDICATEUR D'ERREUR:
#
# MATRICE B DES CONDITIONS LIMITES
# ----------------------------------------------------
#
# On definit des charges en simple Lagrange
# -----------------------------------------
CLIMRE=AFFE_CHAR_MECA(MODELE=MODELE,
                      DOUBLE_LAGRANGE='NON',
                      FACE_IMPO=(_F(GROUP_MA=('SG','SD',),
                                    DNOR=0.0,),
                                 _F(GROUP_MA='SB',
                                    DZ=0.0,),),
                      LIAISON_UNIF=_F(GROUP_MA='SH',
                                      DDL='DZ',),
                      )
BETOR=DEFI_MATERIAU(ELAS_FO=_F(E=E,
                               NU=NU,
                               RHO=RHO,
                               TEMP_DEF_ALPHA=20.0,
                               ALPHA=ALPHA,
                               B_ENDOGE=p_endo ,
                               FONC_DESORP=FCTD,
                               K_DESSIC=p_kdes,),
                    BPEL_BETON=_F(),
                    BETON_BURGER=_F(YoungModulus=p_E_b365,
                                    PoissonRatio=p_nu,
                                    K_RS=p_krs,
                                    ETA_RS=p_etars,
                                    KAPPA=p_kappa,
                                    ETA_IS=p_etais,
                                    K_RD=p_krd,
                                    ETA_RD=p_etard,
                                    ETA_ID=p_etaid,
                                    ETA_FD=p_etafd,
                                    TEMP_0_C=p_temp0c,
                                    QSR_K=p_qsrk),);
CHMATR=AFFE_MATERIAU(MAILLAGE=MAILMEC,
                    AFFE=(_F(GROUP_MA=('PACE','SI','SD','SG','SH','SB',),
                             MATER=BETOR,),
                          _F(GROUP_MA=('CABLEH1','CABLEH2','CABLEH3','CABLEV1','CABLEV2'),
                             MATER=ACIERC),),
                    AFFE_VARC=(_F(TOUT='OUI',
                                  EVOL=HYDRR,
                                  NOM_VARC='HYDR',
                                  NOM_CHAM='HYDR_NOEU'),
                               _F(TOUT='OUI',
                                  EVOL=SCALR,
                                  NOM_VARC='SECH',
                                  VALE_REF=C_100,),
                              _F(TOUT='OUI',
                                 EVOL=TCALR,
                                 NOM_VARC='TEMP',
                                 VALE_REF=T_arret,),),);
CABH10R=DEFI_CABLE_BP(MODELE=MODELE,
                      CHAM_MATER=CHMATR,
                      CARA_ELEM=CARAMECA,
                      GROUP_MA_BETON='PACE',
                      DEFI_CABLE=(_F(GROUP_MA='CABLEH1',
                                     GROUP_NO_ANCRAGE=('CABH1G','CABH1D',),),
                                  _F(GROUP_MA='CABLEH2',
                                     GROUP_NO_ANCRAGE=('CABH2G','CABH2D',),),
                                  _F(GROUP_MA='CABLEH3',
                                     GROUP_NO_ANCRAGE=('CABH3G','CABH3D',),),),
                      TYPE_ANCRAGE=('ACTIF','ACTIF',),
                      TENSION_INIT= p_tensH*p_secc,
                      RECUL_ANCRAGE=0.0,
                      TYPE_RELAX='SANS',);

CABV10R=DEFI_CABLE_BP(MODELE=MODELE,
                      CHAM_MATER=CHMATR,
                      CARA_ELEM=CARAMECA,
                      GROUP_MA_BETON='PACE',
                      DEFI_CABLE=(_F(GROUP_MA='CABLEV1',
                                     GROUP_NO_ANCRAGE=('CABV1B','CABV1H',),),
                                  _F(GROUP_MA='CABLEV2',
                                    GROUP_NO_ANCRAGE=('CABV2B','CABV2H',),),),
                      TYPE_ANCRAGE=('ACTIF','ACTIF',),
                      TENSION_INIT=p_tensV*p_secc,
                      RECUL_ANCRAGE=0.0,
                      TYPE_RELAX='SANS',);

CH_CABHR=AFFE_CHAR_MECA(MODELE=MODELE,
                        DOUBLE_LAGRANGE='NON',
                        RELA_CINE_BP=_F(CABLE_BP=CABH10R,
                                        SIGM_BPEL='NON',
                                        RELA_CINE='OUI',),);

CH_CABVR=AFFE_CHAR_MECA(MODELE=MODELE,
                        DOUBLE_LAGRANGE='NON',
                        RELA_CINE_BP=_F(CABLE_BP=CABV10R,
                                        SIGM_BPEL='NON',
                                        RELA_CINE='OUI',),);

# On calcule la matrice     (0  BT)
#                           (B  0 )
# ---------------------------------

# Matrice elementaire
matbelem = CALC_MATR_ELEM(OPTION='RIGI_MECA',
                          MODELE=MODELE,
                          CHARGE=(CLIMRE, CH_CABHR, CH_CABVR),
                          CALC_ELEM_MODELE='NON')

# Definition du NUME_DDL avec les bon DDLS (simple Lagrange)
dof = NUME_DDL(MODELE=MODELE, CHARGE=(CLIMRE, CH_CABHR, CH_CABVR))

# Assemblage
matbass = ASSE_MATRICE(MATR_ELEM=matbelem,
                       NUME_DDL=dof)

# Recup format numpy
fullB = matbass.EXTR_MATR(sparse=False);

# Switch to sparse format later on
# mas, lm, cm, dm = matbass.EXTR_MATR(sparse=True);
# np.savez_compressed('/tmp/a_tmp_file_matbas.npz', mas, lm, cm, dm)

# Extraction de la matrice B
# --------------------------

# Creation "artificielle" d'un vecteur defini sur le NUME_DDL pour recuperer la position des DDLs Lagrange
vecelem = CALC_VECT_ELEM(OPTION='CHAR_MECA', CHARGE=(CLIMR, CH_CABHR, CH_CABVR), CARA_ELEM=CARAMECA, CHAM_MATER=CHMATR)
vecass = ASSE_VECTEUR(VECT_ELEM=vecelem, NUME_DDL=dof)

# Recuperation de la position des DDLs de Lagrange
comps = vecass.EXTR_COMP(' ', [], topo=1).comp
index_dual = [i for i,x in enumerate(comps) if x[0:4]=='LAGR']
index_primal = [i for i,x in enumerate(comps) if x[0:4]!='LAGR']

# Extraction de B
dual = np.array(index_dual, dtype=np.intp)
primal = np.array(index_primal, dtype=np.intp)
matB = fullB[np.ix_(dual, primal)]

np.save("/home/A34370/dev/mordicus/src/poc-1/examples/Modules/EDF/EmpiricalQuadrature/data/step2/matB.npy", matB)

FIN()
