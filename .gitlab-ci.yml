image: python:3.7-alpine

variables:
  MYPROJECT : 'mordicus'

stages:
  - srcBasicTools
  - docLatex
  - docWebsite
  - test
  - deploy

srcBasicTools:
  stage: srcBasicTools
  image: python:3.7-alpine
  before_script:
    - apk add --no-cache git
  script:
    - cd .. && rm -rf basic-tools && git clone https://gitlab.com/drti/basic-tools.git
    
    
docLatex:
  stage: docLatex
  image: python:3.7-alpine
  before_script:
    - apk add build-base texlive texmf-dist-latexextra
    - pip install -U sphinx sphinxcontrib-bibtex
  script:
    - mkdir -p pages/doc
    - cd doc/ && make latexpdf && cd ..
    - mv doc/build/latex pages/doc/latex
  artifacts:
    name: "Specification File"
    paths:
      - pages/doc/latex


docWebsite:
  stage: docWebsite
  image: python:3.7
  dependencies:
    - docLatex
  before_script:
    - apt-get update
    - apt-get install -y python3-venv gcc python3-dev libopenmpi-dev make
    - pip install --upgrade pip
    - pip install -r ./src/poc-1/requirements.txt
    - pip install -U sphinx
    - export PYTHONPATH=$PWD/src/poc-1/src:$PYTHONPATH
    - export PYTHONPATH=$PWD/../basic-tools/src:$PYTHONPATH
  script:
    - cd src/poc-1 && python setup.py build_sphinx && cd ../..
    - mv src/poc-1/doc/_build/html pages/doc/html
  artifacts:
    name: "Documentation Sphinx"
    paths:
      - pages/doc/html
    

poc-1:
  stage: test
  image: python:3.7
  before_script:
    - apt-get update
    - apt-get install -y python3-venv gcc python3-dev libopenmpi-dev make
    - pip install --upgrade pip
    - pip install -r ./src/poc-1/requirements.txt
    - export PYTHONPATH=$PWD/src/poc-1/src:$PYTHONPATH
    - export PYTHONPATH=$PWD/../basic-tools/src:$PYTHONPATH
  script:
    - echo 'Starting NonRegression tests on Core...'
    - pytest src/poc-1/examples/Core
    - echo '... NonRegression tests on Core ended'
    - mkdir -p pages/coverageReportCore
    - echo 'Starting coverage report on Core...'
    - cd src/poc-1/tests/Core && pytest --cov=../../src/Mordicus/Core --cov-report=html:../../../../pages/coverageReportCore && cd -
    - echo '... coverage report on Core ended'
    - echo 'Starting Phimeca tests...'
    - pytest src/poc-1/tests/Modules/Phimeca
    - echo '... Phimeca tests ended'
    - cd pages/coverageReportCore && grep pc_cov index.html
  coverage: '/pc_cov">([0-9]+\.?[0-9]+?%)/'
  artifacts:
    name: "CoverageCore"
    paths:
      - pages/coverageReportCore

cpp-linux:
  stage: test
  image: python:3.7
  before_script:
    - apt-get update && apt-get install -y python3-dev g++ cmake pybind11-dev
  script:
    - cmake -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror -D_GLIBCXX_ASSERTIONS" -DCMAKE_INSTALL_PREFIX=~/.local src/cpp
    - make install -j4
    - ctest -j4 --output-on-failure --timeout 100

cpp-mingw:
  stage: test
  image: openturns/archlinux-mingw
  before_script:
    - aurman -S mingw-w64-pybind11 --noedit --noconfirm
  script:
    - CXXFLAGS="-Wall -Wextra -D_GLIBCXX_ASSERTIONS" x86_64-w64-mingw32-cmake -DCMAKE_INSTALL_PREFIX=~/.local -DPYTHON_EXECUTABLE=/usr/bin/x86_64-w64-mingw32-python39-bin -DPYTHON_INCLUDE_DIR=/usr/x86_64-w64-mingw32/include/python39 -DPYTHON_LIBRARY=/usr/x86_64-w64-mingw32/lib/libpython39.dll.a src/cpp
    - make install -j4
    - cp ~/.local/bin/*.dll lib/test
    - cp ~/.local/bin/*.dll python/src
    - ctest -j4 --output-on-failure --timeout 100

feelpp:
  stage: test
  image: python:3.7
  before_script:
    - apt-get update
    - apt-get install wget gnupg
    - echo "deb http://deb.debian.org/debian buster-backports main" | tee -a /etc/apt/sources.list
    - echo "deb https://feelpp.jfrog.io/artifactory/debian buster latest" | tee -a /etc/apt/sources.list
    - wget -qO - https://feelpp.jfrog.io/artifactory/api/security/keypair/gpg-debian/public | apt-key add -
    - apt-get update
    - apt-get install -t buster-backports cmake
    - apt-get install -y python3-venv python3-feelpp feelpp-tools python3-mpi4py python3-sympy python3-feelpp-toolboxes python3-feelpp-mor  libfeelpp-dev
    - pip install --upgrade pip
    - pip install -r ./src/poc-1/requirements.txt
    - export PYTHONPATH=$PWD/src/poc-1/src:$PYTHONPATH
    - export PYTHONPATH=$PWD/../basic-tools/src:$PYTHONPATH
  script:
    - cmake -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror -D_GLIBCXX_ASSERTIONS" -DCMAKE_INSTALL_PREFIX=~/.local -DMORDICUS_ENABLE_CEMOSIS=ON src/cpp
    - make install -j4
    - ctest -j4 --output-on-failure --timeout 100

feelpp-docker:
  stage: test
  image: feelpp/feelpp-mor:buster
  before_script:
    - pip3 install -r ./src/poc-1/requirements.txt
    - export PYTHONPATH=$PWD/src/poc-1/src:$PYTHONPATH
    - export PYTHONPATH=$PWD/../basic-tools/src:$PYTHONPATH
    - export PATH=$HOME/.local/bin:$PATH
  script:
    - echo 'Starting Feel++ MOR tests...'
    - mpirun -np 1 python3 src/poc-1/examples/Modules/Cemosis/test_feelpp_mor.py 
    - mpirun -np 2 python3 src/poc-1/examples/Modules/Cemosis/test_feelpp_mor.py 


pages:
  image: alpine:latest
  stage: deploy
  dependencies:
    - docLatex
    - docWebsite
    - poc-1
  script:
    - mv pages/ public/
  artifacts:
    name: "WebSite"
    paths:
      - public      
  only:
  - master



